[{"content":"Hi, in this post I\u0026rsquo;m going to tell you how to install Argo CD and deploy a simple application stored in GitLab by ArgoCD. This post is based on the YouTube video: What is Argo CD? Argo CD is a GitOps tool for Kubernetes. In simple words, GitOps is an approach for deploying your applications and infrastructure when Git is a single place of truth.\nPreparing the installation Before starting an installation you need to fulfill the requirements: – Install kubectl – Prepare access to the Kubernetes cluster\nThere are two types of installation: multi-tenant and core.\nThe multi-tenant installation is the most common way to install Argo CD. This type of installation is typically used to service multiple application developer teams.\nThere are two types of multi-tenant installation: \u0026ldquo;Non High Availability\u0026rdquo; and \u0026ldquo;High Availability\u0026rdquo; or HA.\nFurthermore, each type is divided into standard installation and installation which requires only namespace-level privileges.\nThe Argo CD Core installation is primarily used to deploy Argo CD in headless mode. All details about this type can be found in the official documentation.\nLastly, you can install Argo CD using Helm or Kustomize.\nTo conclude I am going to use standard Arg CD installation in HA mode.\nThe installation process Let’s get started on our journey. Open the manifest with the HA version.\nThen create the directory named \u0026ldquo;base\u0026rdquo; and the file “install.yaml” in it. Copy and paste the manifest into it.\nargocd └── base └── install.yaml After that create a \u0026ldquo;kustomization.yaml\u0026rdquo; file where set \u0026ldquo;install.yaml\u0026rdquo; in the resources section.\nargocd └── base ├── install.yaml └── kustomization.yaml $ cat ./base/kustomization.yaml apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources: - install.yaml In my case I have one environment named test so I will create the directory “overlays” with one directory “test”.\nargocd/ ├── ... └── overlays └── test Why so? I tell about this structure in my video about Kustomize. I recommend it for watching to understand this program clearly. In the directory test create a kustomization.yaml file and the directory named “files”.\nargocd/ ├── ... └── overlays └── test ├── files └── kustomization.yaml if you have installed the Ingress Nginx Controller you can put the Ingress manifest into the files directory.\ncat ./overlays/test/files/ingress.yaml apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: argo-cd-ui annotations: nginx.ingress.kubernetes.io/backend-protocol: \u0026#34;HTTPS\u0026#34; spec: ingressClassName: nginx rules: - host: argocd.company.com http: paths: - path: / pathType: Prefix backend: service: name: argocd-server port: name: https Note that the domain for my Argo CD is “argocd.company.com“.\nI added 1 annotation because I had redirect loops when connecting to the Argo CD web interface.\nannotations: nginx.ingress.kubernetes.io/backend-protocol: \u0026#34;HTTPS\u0026#34; It’s time to make customizations of the Argo CD manifest. Open your kustomization.yaml file.\nvi ./overlays/test/kustomization.yaml Firstly, paste standard strings with apiVersion and Kind.\napiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization Then specify files in the resources section: ingress.yaml and base directory.\nresources: - ../../base/ - ./files/ingress.yaml Add namespace field.\nnamespace: argocd After that, add the secretGenerator section with three keys: –\tUsername –\tPassword –\tUrl\nsecretGenerator: - name: my-repo-secret literals: - username= - password= - url= Finally, add a patches section with one patch. This patch will set one label into the secret created by secretGenerator. Argo CD will use the credentials, configured in this secret, to access your GitLab.\npatches: - patch: |- apiVersion: v1 kind: Secret metadata: name: my-repo-secret labels: argocd.argoproj.io/secret-type: repo-creds Next, we need to make credentials for authenticating in the GitLab Repository. First, Create a group where the project will be stored.\nThen, create a blank project and put it into the created group. After, Create an Access Token for ArgoCD. Copy and paste your token in the key “password“ in secretGenerator. In the key URL paste the URL of your group. In the key “username” put the name of your token. In my case it is argocd.\nsecretGenerator: - name: my-repo-secret literals: - username=argocd - password=xxxxxxxx - url=https://gitlab.devops-serge.com/mygroup We are ready to install Argo CD. Open your terminal.\nCreate the namespace \u0026ldquo;argocd\u0026rdquo; and then Install Argo CD using the command kubectl apply with the K option.\ncd overlays/test kubectl create ns argocd Kubectl apply –k ./ Check a status of the pods.\nkubectl -n argocd get pod How to login Let’s go into the web user interface. Add domain argocd.company.com to the /etc/hosts file. If you are not familiar with Ingress, watch my video about MetalLB and Ingress Nginx Controller. Alternatively, if you don’t have installed Ingress Nginx Controller you can connect to the Argo CD web interface using the kubectl port-forward command.\nkubectl port-forward service/argocd-server 9000:443 -n argocd The admin password is stored in the secret argocd-initial-admin-secret in the key: password. Retrieve it and log in. As you know, secrets are stored in based64 format so we need to decode it.\nkubectl -n argocd get secret argocd-initial-admin-secret -o yaml | grep password echo \u0026lt;BASE64_PASSWORD\u0026gt; | base64 -d Let’s log in to Argo CD. In Settings → Repositories, you can find one template created by our secretGenerator. How to deploy an Argo CD app We are ready to deploy an application. I’ve prepared a simple helm chart before. How to do your helm charts you can find in one of my videos. My helm chart consists of a configmap, deployment, and ingress.\n.helm/ ├── Chart.yaml ├── templates │ ├── 0-configmap.yaml │ ├── 1-deployment.yaml │ └── 2-ingress.yaml └── values.yaml The configmap contains the index.html page. Depending on the environment (test, production, or something else), the text color will be different.\ncat .helm/templates/0-configmap.yaml --- apiVersion: v1 kind: ConfigMap metadata: name: index-html data: index.html: | \u0026lt;h1 style=\u0026#39;color: {{ pluck .Values.env .Values.color | first | default .Values.color._default }};\u0026#39;\u0026gt; Hello world! \u0026lt;/h1\u0026gt; The deployment contains an nginx image for a container to which the configmap will be attached.\ncat .helm/templates/1-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Chart.Name }} spec: selector: matchLabels: app: {{ .Chart.Name }} template: metadata: labels: app: {{ .Chart.Name }} annotations: checksum/config: \u0026gt;- {{ include (print $.Template.BasePath \u0026#34;/0-configmap.yaml\u0026#34;) . | sha256sum }} spec: containers: - name: {{ .Chart.Name }} image: nginx:alpine3.19 volumeMounts: - name: index-html-volume mountPath: /usr/share/nginx/html/index.html subPath: index.html ports: - containerPort: 80 volumes: - name: index-html-volume configMap: name: index-html Of course, there is a service for the deployment too.\n--- apiVersion: v1 kind: Service metadata: name: {{ .Chart.Name }} spec: selector: app: {{ .Chart.Name }} ports: - name: http port: 80 targetPort: 80 protocol: TCP Host in the ingress depends on the environment Values.env too.\n--- apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: {{ .Chart.Name }} spec: ingressClassName: nginx rules: - host: {{ pluck .Values.env .Values.domain | first | default .Values.domain._default }} http: paths: - path: / pathType: Prefix backend: service: name: {{ .Chart.Name }} port: number: 80 If the helm chart is deployed in the test environment the domain will be my-program-test.company.com\ncat .helm/values.yaml Below you can see the color of the text that will be used in the \u0026ldquo;test\u0026rdquo; environment.\ndomain: test: my-program-test.company.com color: test: green You can download this helm chart from my git repository.\nPut the helm chart into the created project in GitLab. The helm chart is uploaded. The next step is to configure Argo CD for monitoring this repository and deploy the helm chart to the cluster. To do it in ArgoCD there is an object called Application.\nOn the screen, you can see an example of the Application. In my case, I want to deploy an application that will synchronize other applications stored in the test-apps directory. I’ve prepared this application before.\ncat \u0026lt;\u0026lt; EOF | tee 1\u0026gt; /dev/null argocd-app/argocd-test.yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata: name: argocd-test namespace: argocd spec: project: default source: repoURL: \u0026#39;\u0026#39; path: test-apps targetRevision: main destination: server: \u0026#39;https://kubernetes.default.svc\u0026#39; namespace: argocd syncPolicy: automated: selfHeal: true Let’s create a repository for these apps. Then push the application to the repository. Use the “Push an existing folder” section. Open the repository and copy the link from the Clone with HTTPS section. Paste it in the repoURL field.\napiVersion: argoproj.io/v1alpha1 kind: Application metadata: name: argocd-test namespace: argocd spec: source: repoURL: \u0026#39;https://gitlab.devops-serge.com/mygroup/argocd-app.git\u0026#39; Push your changes to the repository.\nAfter that apply the manifest with the application using kubectl.\ncd argocd-app kubectl apply -f argocd-test.yaml Check the application in the ArgoCD user interface. There is an error. I have not created test-app path yet. Create the directory and push it into the remote repository. Then recheck the application.\nmkdir argocd-app/test-apps argocd-app/ └── test-apps Refresh the application. The application was synced. Everything looks good.\nFinally, deploy the helm chart using ArgoCD. To do it you need to create an application again. I’ve done it before. You can see it below.\ncat \u0026lt;\u0026lt; EOF | tee 1\u0026gt; /dev/null argocd-app/test-apps/my-program.yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata: name: my-program-test namespace: argocd spec: project: default source: targetRevision: main repoURL: \u0026#39;https://gitlab.devops-serge.com/mygroup/myproject.git\u0026#39; path: .helm helm: releaseName: my-program-test valueFiles: - values.yaml values: | env: test destination: server: \u0026#39;https://kubernetes.default.svc\u0026#39; namespace: my-program-test syncPolicy: automated: selfHeal: true syncOptions: - CreateNamespace=true EOF Push the application to the remote repository.\ngit add . git commit -m \u0026#39;add repoURL\u0026#39; git push You can see below that our main application deployed the my-program application in the cluster. Let’s look at the my-program application. Let’s look at the main page of my-program. I need to add the domain name in my /etc/hosts file again. You can see that everything works smoothly. That’s it. We\u0026rsquo;ve installed Argo CD and deployed the simple application. See you!\n","permalink":"https://devops-serge.com/posts/install_argo_cd/","summary":"Hi, in this post I\u0026rsquo;m going to tell you how to install Argo CD and deploy a simple application stored in GitLab by ArgoCD. This post is based on the YouTube video: What is Argo CD? Argo CD is a GitOps tool for Kubernetes. In simple words, GitOps is an approach for deploying your applications and infrastructure when Git is a single place of truth.\nPreparing the installation Before starting an installation you need to fulfill the requirements: – Install kubectl – Prepare access to the Kubernetes cluster","title":"Install Argo CD with Helm on Kubernetes: add repo and application"},{"content":"Hi, in this tutorial I am going to tell you how to install and access Kubernetes Dashboard. This post is based on the YouTube video: Kubernetes Dashboard is a web-based user interface to manage cluster resources.\nInstalling the dashboard Let\u0026rsquo;s start by installing the dashboard.\nBefore doing it you need to install Helm, kubectl and, of course, have access to the Kubernetes cluster.\nAdd a repository:\nhelm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/ Update the information about available charts.\nhelm repo update Check the last versions of the application.\nhelm search repo -l kubernetes-dashboard/kubernetes-dashboard | head -3 NAME CHART VERSION APP VERSION DESCRIPTION kubernetes-dashboard/kubernetes-dashboard 7.5.0 General-purpose web UI for Kubernetes clusters kubernetes-dashboard/kubernetes-dashboard 7.4.0 General-purpose web UI for Kubernetes clusters In my case, the last version is 7.5.0.\nDownload helm values to investigate them.\nhelm show values kubernetes-dashboard/kubernetes-dashboard --version 7.5.0 \u0026gt; values.yaml I will override only values to deploy additional resource ingress. These values are stored in the file my-values.yaml.\napp: ingress: enabled: true hosts: - dashboard.demo.com ingressClassName: nginx After deploying an ingress object I\u0026rsquo;ll be able to access the dashboard using the domain: dashboard.demo.com.\nIf you don\u0026rsquo;t have installed Ingress Controller you can access the dashboard using the kubectl port-forward command. I\u0026rsquo;ll show you how to do it. Afterward, check my video on how to install the Ingress Nginx Controller.\nWe are ready to start the installation.\nhelm upgrade --install \\ --namespace dashboard \\ --create-namespace \\ --debug \\ --values my-values.yaml \\ --version 7.5.0 \\ kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard In my command, I added the debug option to output additional information on the screen during installation and override some values with file my-values.yaml.\nThe installation is completed.\nCheck the installation Let\u0026rsquo;s check that the pods are running.\nkubectl -n dashboard get pod You will see something like this:\n$ kubectl -n dashboard get pod NAME READY STATUS RESTARTS AGE kubernetes-dashboard-api-54b8db468c-zbzdr 1/1 Running 1 (7h5m ago) 2d2h kubernetes-dashboard-auth-6c7cb89b9c-fwttr 1/1 Running 1 (7h5m ago) 2d2h kubernetes-dashboard-kong-7696bb8c88-8hq5x 1/1 Running 1 (7h5m ago) 2d2h kubernetes-dashboard-metrics-scraper-5485b64c47-dbp9c 1/1 Running 1 (7h5m ago) 2d2h kubernetes-dashboard-web-596b7c6f99-ppjqj 1/1 Running 1 (7h5m ago) 2d2h Before opening the dashboard I need to add my domain dashboard.demo.com to the /etc/hosts file to resolve it.\nkubectl -n dashboard get ingress echo 192.168.1.10 dashboard.demo.com | sudo tee --append /etc/hosts grep dashboard.demo.com /etc/hosts The output:\n192.168.1.10 dashboard.demo.com 192.168.1.10 is the IP address of the HAProxy that balances traffic to the instances of the ingress nginx controller.\nIt\u0026rsquo;s done. Let\u0026rsquo;s open the dashboard.\nAccess the dashboard In the previous versions of the dashboard, you could connect to it via bearer token or kubeconfig. Now you have only one option. It is a bearer token.\nAs I mentioned before if you don\u0026rsquo;t have an ingress controller, you can use the kubectl port-forward command. Let\u0026rsquo;s execute it.\nFirst, find out the name of the service which responsible for processing the requests from the browser.\nkubectl -n dashboard get svc The output:\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kubernetes-dashboard-api ClusterIP 100.128.124.50 \u0026lt;none\u0026gt; 8000/TCP 2d2h kubernetes-dashboard-auth ClusterIP 100.128.124.115 \u0026lt;none\u0026gt; 8000/TCP 2d2h kubernetes-dashboard-kong-manager NodePort 100.128.34.93 \u0026lt;none\u0026gt; 8002:32700/TCP,8445:30412/TCP 2d2h kubernetes-dashboard-kong-proxy ClusterIP 100.128.147.78 \u0026lt;none\u0026gt; 443/TCP 2d2h kubernetes-dashboard-metrics-scraper ClusterIP 100.128.51.93 \u0026lt;none\u0026gt; 8000/TCP 2d2h kubernetes-dashboard-web ClusterIP 100.128.27.216 \u0026lt;none\u0026gt; 8000/TCP 2d2h It is the kubernetes-dashboard-kong-proxy service.\nSecond, execute the main command.\nkubectl -n dashboard port-forward service/kubernetes-dashboard-kong-proxy 8000:443 Third, open the browser https://localhost:8000.\nYou will see something like this in the console:\nForwarding from 127.0.0.1:8000 -\u0026gt; 8443 Handling connection for 8000 Handling connection for 8000 It works fine.\nCreating the service account Let\u0026rsquo;s create a service account, Cluster Role Binding, and Secret Token used to access the dashboard web user interface. I\u0026rsquo;ve prepared the manifest before.\napiVersion: v1 kind: ServiceAccount metadata: name: my-user namespace: dashboard --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: kubernetes-dashboard-binding roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: my-user namespace: dashboard --- apiVersion: v1 kind: Secret type: kubernetes.io/service-account-token metadata: name: my-user-token namespace: dashboard annotations: kubernetes.io/service-account.name: \u0026#34;my-user\u0026#34; You can see a ServiceAccount named \u0026ldquo;my-user\u0026rdquo;, ClusterRoleBinding binds a predefined Cluster Role cluster-admin to our service account and token for the service account.\nDeploy the manifest.\nkubectl apply -f token.yaml Then extract the token from the secret.\nkubectl -n dashboard get secret my-user-token -o yaml | grep token: The token:\ntoken: \u0026lt;TOKEN\u0026gt; As you know all secrets are stored in base64 format so decode it.\necho \u0026lt;TOKEN\u0026gt; | base64 -d Copy the decoded token and paste it into the input field on the authentication page.\nWe are in.\nIn the dashboard web interface, there are different Kubernetes objects—for example, pods, deployments, and so forth.\nYou can also see information about these objects:\nmetadata conditions and so on This dashboard is a good choice for people who don\u0026rsquo;t work with Kubernetes as administrators. For example, software engineers.\nYou can explore logs of the pods and execute commands within pods using Kubernetes Dashboard.\nAlso, you can create manifests. For example, let\u0026rsquo;s create a read-only service account.\napiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: ro-cluster-role rules: - apiGroups: [\u0026#34;*\u0026#34;] resources: [\u0026#34;*\u0026#34;] verbs: [\u0026#34;get\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;] --- apiVersion: v1 kind: ServiceAccount metadata: name: ro-user namespace: default --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: ro-clusterrolebinding roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: ro-cluster-role subjects: - kind: ServiceAccount name: ro-user namespace: default --- apiVersion: v1 kind: Secret type: kubernetes.io/service-account-token metadata: name: ro-user-token namespace: default annotations: kubernetes.io/service-account.name: \u0026#34;ro-user\u0026#34; As you see the read-only user can get, list, and watch resources in all apiGroups. Upload the manifest.\nLet\u0026rsquo;s take the token. Go to the page https://dashboard.demo.com/#/secret?namespace=default and open the secret.\nIt is in decoded format. Copy it.\nExit the dashboard.\nPaste your token in the bearer token field and sign in.\nTry to delete something. For example, kubernetes-dashboard-web deployment. Try to create a new deployment. The manifest:\napiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment spec: replicas: 1 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:latest ports: - containerPort: 80 Of course, you can\u0026rsquo;t create resources too. It is forbidden because this user has read-only permissions.\nThat\u0026rsquo;s it. I hope this information was helpful to you.\n","permalink":"https://devops-serge.com/posts/install_kubernetes_dashboard/","summary":"Hi, in this tutorial I am going to tell you how to install and access Kubernetes Dashboard. This post is based on the YouTube video: Kubernetes Dashboard is a web-based user interface to manage cluster resources.\nInstalling the dashboard Let\u0026rsquo;s start by installing the dashboard.\nBefore doing it you need to install Helm, kubectl and, of course, have access to the Kubernetes cluster.\nAdd a repository:\nhelm repo add kubernetes-dashboard https://kubernetes.","title":"Kubernetes Dashboard: How to Install it Using Helm and Access"}]